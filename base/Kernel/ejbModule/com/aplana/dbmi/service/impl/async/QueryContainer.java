/**
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements.  See the NOTICE file distributed with
 *   this work for additional information regarding copyright ownership.
 *   The ASF licenses this file to you under the Apache License, Version 2.0
 *   (the "License"); you may not use this file except in compliance with
 *   the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.aplana.dbmi.service.impl.async;

import com.aplana.dbmi.action.Action;
import com.aplana.dbmi.model.ContextProvider;
import com.aplana.dbmi.model.DataObject;
import com.aplana.dbmi.service.DataException;
import com.aplana.dbmi.service.impl.*;
import com.aplana.dbmi.service.impl.locks.LockManagementBean.Lock;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.BeanFactory;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Container for all {@link com.aplana.dbmi.service.impl.QueryBase queries},
 * which can serialize and perform in special way.<br>
 * Comparable in FIFO order.
 */
public class QueryContainer implements Serializable, Comparable<QueryContainer> {

	private static final long serialVersionUID = 2l;
	private static final int NORMAL_PRIORITY = 50;
	
	private final static AtomicLong seq = new AtomicLong(1);
	private final long id;
	private QueryBase query;
	private String className;
	private Date creationTime = new Date();
	private Date addingTime;
	private int priority = NORMAL_PRIORITY;
	private transient BeanFactory factory;
	private ExecPolicy policy;
	private Lock lockObject;
	private UserData user;
	private QueryContainer next;
	private QueryContainer prev;
	private ContextProvider contextProvider;
	private AtomicBoolean done = new AtomicBoolean(false);

	private static Log logger = LogFactory.getLog(QueryContainer.class);

	/**
	 * Creates container with specified query and autogenerated {@link #getId()
	 * Id}
	 * 
	 * @param query
	 *            to be performed
	 */
	public QueryContainer(QueryBase query) {
		this(query, false);
	}

	/**
	 * Creates container with specified query
	 * 
	 * @param query
	 *            to be performed
	 * @param withoutId
	 *            true if creates without container {@link #getId() Id}, false
	 *            if creates with autogenerated {@link #getId() Id}
	 */
	public QueryContainer(QueryBase query, boolean withoutId) {
		this.id = (withoutId) ? -1 : seq.getAndIncrement();
		this.query = query;
		this.className = query.getClass().getSimpleName();
		this.contextProvider = ContextProvider.getContext();
		query.setQueryContainer(this);
	}

	public ContextProvider getContextProvider() {
		return contextProvider;
	}
	
	/**
	 * Renew this query
	 */
	void renew() {
		Object[] objs = determinateObject();
		try {
			this.query = query.renew(objs);
		} catch (IllegalArgumentException e) {
			logger.error("Error while preparing query "+query+" for repeating:", e);
		} catch (IllegalAccessException e) {
			logger.error("Error while preparing query "+query+" for repeating:", e);
		} catch (InvocationTargetException e) {
			logger.error("Error while preparing query "+query+" for repeating:", e);
		}
		if (query instanceof ActionQueryBase) {
			((ActionQueryBase) query).setAction((Action<?>) objs[0]);
		} else if (query instanceof SaveQueryBase) {
			((SaveQueryBase) query).setObject((DataObject) objs[0]);
		}
		query.setUser(getUser());
		((ActiveQueryBases)factory.getBean(ActiveQueryBases.BEAN_NAME)).add(query);
		this.className = query.getClass().getSimpleName();
	}
	/**
	 * Returns performed query
	 * 
	 * @return query
	 */
	public QueryBase getQuery() {
		return query;
	}

	/**
	 * Sets time, when this query is added to queue
	 * 
	 * @param addingTime
	 *            the difference, measured in milliseconds, between the current
	 *            time and midnight, January 1, 1970 UTC
	 *            (System.currentTimeMillis())
	 */
	public void setAddingTime(long addingTime) {
		this.addingTime = new Date();
		this.addingTime.setTime(addingTime);
	}

	/**
	 * Returns time, when this query is added to queue
	 * 
	 * @return addingTime
	 */
	public Date getAddingTime() {
		return addingTime;
	}
	
	public Date getCreationTime() {
		return creationTime;
	}

	/**
	 * Returns Simple Class name of performed query
	 * 
	 * @return className
	 */
	public String getClassName() {
		return this.className;
	}

	@Override
	public int compareTo(QueryContainer o) {
		if (this == o || id == o.id)
			return 0;
		int res = (id < o.id ? -1 : 1);
		return res;
	}

	/**
	 * Sets priority of query (the more priority of query the faster it will be
	 * executed). Default value = 50
	 * 
	 * @param priority
	 *            of query
	 */
	public void setPriority(Integer priority) {
		if (priority == null) {
			this.priority = NORMAL_PRIORITY;
		} else {
			this.priority = priority;
		}
	}

	/**
	 * Returns priority of query
	 * 
	 * @return priority
	 */
	public int getPriority() {
		return priority;
	}

	/**
	 * Returns the {@link com.aplana.dbmi.service.impl.async.ExecPolicy policy}
	 * name about query
	 * 
	 * @return policy about query
	 */
	public ExecPolicy getPolicy() {
		return policy;
	}

	/**
	 * Sets the {@link com.aplana.dbmi.service.impl.async.ExecPolicy policy}
	 * name about query
	 * 
	 * @param policy
	 *            about query
	 */
	public void setPolicy(ExecPolicy policy) {
		this.policy = policy;
	}

	/**
	 * Returns identifier of container
	 * 
	 * @return identifier or -1 if id is empty
	 */
	public long getId() {
		return this.id;
	}

	/**
	 * Sets query's BeanFactory
	 */
	public void setBeanFactory(BeanFactory factory) {
		this.query.setBeanFactory(factory);
		this.factory = factory;
	}

	/**
	 * Returns query's BEanFactory
	 */
	public BeanFactory getBeanFactory() {
		return factory;
	}

	/**
	 * Returns thread id of user who perform this query
	 * 
	 * @return thread id
	 */
	public Lock getLockObject() {
		return lockObject;
	}

	/**
	 * Sets thread id of user who perform this query
	 * 
	 * @param userThread
	 */
	public void setLockObject(Lock userThread) {
		this.lockObject = userThread;
	}

	/**
	 * Who performs this container
	 */
	public UserData getUser() {
		return user;
	}
	
	/**
	 * Who performs this container
	 */
	public void setUser(UserData user) {
		this.user = user;
	}

	@Override
	public int hashCode() {
		int hash = 47;
		hash ^= query.hashCode() ^ className.hashCode();
		return hash;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null || !(obj instanceof QueryContainer)) {
			return false;
		}
		QueryContainer other = (QueryContainer)obj;
		return this.id == other.id && this.creationTime.equals(other.creationTime);
	}

	/**
	 * This object represents data to recover this QueryContainer
	 * 
	 */
	public class BackupData {
		private ByteArrayOutputStream optionData = new ByteArrayOutputStream();
		private ByteArrayOutputStream objectsData = new ByteArrayOutputStream();
		private ByteArrayOutputStream userData = new ByteArrayOutputStream();
		private ByteArrayOutputStream lockData = new ByteArrayOutputStream();

		private BackupData() throws DataException {
			ObjectOutputStream out = null;
			try {
				out = new ObjectOutputStream(optionData);
				Object[] objs = determinateObject();
				out.writeObject(query.getExecOption());
				out.close();
				out = new ObjectOutputStream(objectsData);
				out.writeObject(objs);
				out.close();
				out = new ObjectOutputStream(userData);
				out.writeObject(user.write());
				out.close();
				out = new ObjectOutputStream(lockData);
				out.writeObject(lockObject);
				out.close();
			} catch (IOException e) {
				logger.error("Exception during creating backup data", e);
				throw new DataException("general.runtime.async.creating", e);
			}
		}

		public ByteArrayOutputStream getOptions() {
			return optionData;
		}

		public ByteArrayOutputStream getWriteObjects() {
			return objectsData;
		}

		public ByteArrayOutputStream getUser() {
			return userData;
		}

		public ByteArrayOutputStream getLock() {
			return lockData;
		}

	}

	private Object[] determinateObject() {
		Object[] objs = null;
		// TODO: other types
		if (query instanceof SaveQueryBase) {
			objs = new Object[] {((SaveQueryBase) query).getObject()};
		} else if (query instanceof ActionQueryBase) {
			objs = new Object[] {((ActionQueryBase) query).getAction()};
		}
		return objs;
	}
	/**
	 * Returns data which help save this query
	 * 
	 * @return backup
	 * @throws DataException
	 */
	public BackupData getBackupData() throws DataException {
		return new BackupData();
	}
	
	public void setNext(QueryContainer nextContainer) {
		if (nextContainer != null) {
			if (this.next == null) {
				this.next = nextContainer;
				nextContainer.setPrev(this);
			} else {
				this.next.setNext(nextContainer);
			}
		}
	}
	
	public QueryContainer getNext() {
		return next;
	}
	
	public QueryContainer getPrev() {
		return prev;
	}
	
	public void setPrev(QueryContainer prevContainer) {
		if (prevContainer != null)
			this.prev = prevContainer;
	}
	
	public synchronized Boolean isDone() {
		return done.get();
	}
	
	public synchronized void done() {
		this.done.compareAndSet(false, true);
	}
	
	public boolean isLinked() {
		return this.prev != null;
	}
}
