/**
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements.  See the NOTICE file distributed with
 *   this work for additional information regarding copyright ownership.
 *   The ASF licenses this file to you under the Apache License, Version 2.0
 *   (the "License"); you may not use this file except in compliance with
 *   the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package com.aplana.crypto.cryptoserviceproxy;

import java.security.cert.X509Certificate;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "CryptoService", targetNamespace = "http://crypto.aplana.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CryptoService {


    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws CryptoServiceException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkStringContentSignature", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.CheckStringContentSignature")
    @ResponseWrapper(localName = "checkStringContentSignatureResponse", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.CheckStringContentSignatureResponse")
    public boolean checkStringContentSignature(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2)
        throws CryptoServiceException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns byte[]
     * @throws CryptoServiceException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getByteArrayDigest", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.GetByteArrayDigest")
    @ResponseWrapper(localName = "getByteArrayDigestResponse", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.GetByteArrayDigestResponse")
    public byte[] getByteArrayDigest(
        @WebParam(name = "arg0", targetNamespace = "")
        byte[] arg0)
        throws CryptoServiceException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns com.aplana.crypto.cryptoserviceproxy.WsPkcs7Result
     * @throws CryptoServiceException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "verifyPKCS7", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.VerifyPKCS7")
    @ResponseWrapper(localName = "verifyPKCS7Response", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.VerifyPKCS7Response")
    public WsPkcs7Result verifyPKCS7(
        @WebParam(name = "arg0", targetNamespace = "")
        byte[] arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        byte[] arg1)
        throws CryptoServiceException_Exception
    ;
    
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkCertificate", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.CheckCertificate")
    @ResponseWrapper(localName = "checkCertificateResponse", targetNamespace = "http://crypto.aplana.com/", className = "com.aplana.crypto.cryptoserviceproxy.CheckCertificateResponse")
    public boolean checkCertificate(
            @WebParam(name = "arg0", targetNamespace = "")
            byte[] arg0)
            throws CryptoServiceException_Exception
        ;

}
