/**
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements.  See the NOTICE file distributed with
 *   this work for additional information regarding copyright ownership.
 *   The ASF licenses this file to you under the Apache License, Version 2.0
 *   (the "License"); you may not use this file except in compliance with
 *   the License.  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.aplana.medo.converters;

import static com.aplana.medo.cards.CardXMLBuilder.VALUE_TAG;

import java.util.Properties;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.aplana.dbmi.service.client.DataServiceFacade;

/**
 * Base class for so-called converters. Converter is a class that allows to
 * convert some element from DOM document to the <em>attribute</em> element of
 * card. It is used to perform post-processing of XML file that was generated by
 * XSL transformation of source IEDMS XML file.
 */
public abstract class Converter {

    protected static final String AUXILIARY_TAG = "auxiliary";

    protected final Properties properties;
    protected final String name;
    protected DataServiceFacade serviceBean;

    /**
     * Creates a new instance from a <code>properties</code> configuration and
     * a tag name of input DOM element.
     *
     * @param properties -
     *                configuration that should contain all necessary
     *                information that will be used to convert.
     * @param name -
     *                tag name of DOM element that will be converted
     */
    public Converter(Properties properties, String name) {
	this.properties = properties;
	this.name = name;
    }

    /**
     * Main method of class that used to convert element.
     *
     * @param document -
     *                DOM document that use to create <em>attribute</em>
     *                element
     * @param element -
     *                source DOM element
     * @return <em>attribute</em> element
     * @throws ConverterException
     */
    public abstract Element convert(Document document, Element element)
	    throws ConverterException;

    /**
     * Returns single value of <em>attribute</em> element. This value is
     * stored in <em>value</em> child of <em>attribute</em>.
     *
     * @param attribute -
     *                'attribute' element
     * @return single value of 'attribute' element
     */
    protected String extractValueFromAttribute(Element attribute) {
	NodeList elementValues = attribute.getElementsByTagName(VALUE_TAG);
	// Suppose that only one value is allowed here
	if (elementValues.getLength() < 1)
	    return "";
	return elementValues.item(0).getTextContent();
    }

    /**
     * Returns auxiliary information of attribute. Such one is contained in
     * child element {@link #AUXILIARY_TAG} of current.
     *
     * @param attribute -
     *                source element representing attribute
     * @return value of {@link #AUXILIARY_TAG} child element
     */
    protected String extractAuxiliaryFromAttribute(Element attribute) {
	NodeList elementValues = attribute.getElementsByTagName(AUXILIARY_TAG);
	// Suppose that only one value is allowed here
	if (elementValues.getLength() < 1)
	    return "";
	return elementValues.item(0).getTextContent();
    }

    /**
     * Returns <code>properties<code> configuration
     *
     * @return <code>properties<code>
     */
    protected Properties getProperties() {
	return properties;
    }

    public DataServiceFacade getServiceBean() {
        return this.serviceBean;
}

    public void setServiceBean(DataServiceFacade serviceBean) {
        this.serviceBean = serviceBean;
    }
}
