#!/bin/sh
#
#   Licensed to the Apache Software Foundation (ASF) under one or more
#   contributor license agreements.  See the NOTICE file distributed with
#   this work for additional information regarding copyright ownership.
#   The ASF licenses this file to you under the Apache License, Version 2.0
#   (the "License"); you may not use this file except in compliance with
#   the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# decription: init.d script for headless libreoffice
# chkconfig: 2345 80 30
# processname: soffice.bin
# source function library
. /etc/rc.d/init.d/functions

prog="loconverter"

RETVAL=0
LO_PATH="/usr/lib64/libreoffice/program/soffice.bin"
LO_HOME="/opt/br4j/jboss-portal/server/default/data/loconverter"
LO_ARGS='--nofirststartwizard --invisible --headless --norestore --nologo --nodefault --accept="socket,host=localhost,port=8100;urp;"'
LO_PIDFILE="${LO_HOME}/system/soffice.bin.pid"
LO_USER="jboss"
LO_CMD="${LO_PATH} ${LO_ARGS}"
LO_LOG="${LO_HOME}/system/loconverter.log"
LO_STOP_WAIT=30
LO_LOCKFILE="/var/lock/subsys/loconverter"
check_user() {
    if [ "$(id -un)" != "root" ]
    then return 1
    else return 0
    fi
}

get_pid() {
    if [ ! -z "$LO_PATH" ]
    then
        pgrep -u "$LO_USER" -f "$LO_PATH"
    fi
}

get_status() {
    PID=$(get_pid)
    if [ -z "$PID" ]
    then
        echo "$prog is dead"
        return 1
    fi
    echo "$prog is up (pid: $PID)"
    return 0
}

start()
{
    check_user
    if [ $? -ne 0 ]
    then
        printf %s "ERROR: You do not have permissions to perform this operation"
        failure "$prog start with insufficient privilegies"
        echo
        return 1
    fi
    get_status > /dev/null 2>&1
    if [ "$?" -eq 0 ]; then
        printf %s "$prog is already running"
        echo_failure
        echo
        return 1
    fi
    printf %s "Starting $prog"
    runuser "$LO_USER" -c "$LO_CMD > $LO_LOG 2>&1 &"  
    if [ "$?" != "0" ]; then
        failure "$prog start"
        echo
        return 1
    fi
    touch $LO_LOCKFILE
    success "$prog start"
    echo
    return 0

}
stop() {
    check_user
    if [ "$?" -ne 0 ]
    then
        printf %s "ERROR: You do not have permission to perform this operation"
        failure "$prog stop with insufficient privilegies"
        echo
        return 1
    fi
    get_status > /dev/null 2>&1
    if [ $? -eq 1 ]; then
        printf %s "$prog is already stopped"
        echo_failure
        echo
        return 1
    fi
    printf %s "Stopping $prog"
    local count=0
    local stopped=false
    local PID=$(get_pid)
    kill -TERM "$PID"
    until [ $count -gt "$LO_STOP_WAIT" ]; do
        get_status > /dev/null 2>&1
        if [ "$?" -eq 1 ]; then
            stopped=true
            break
        fi
        sleep 1
        count="$((count+1))";
    done
    if $stopped; then
        success "$prog stop"
        rm $LO_LOCKFILE
        echo
        return 0
    else
        failure "$prog stop"
        return 1
    fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        get_status
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart}"

    esac
    exit $?
